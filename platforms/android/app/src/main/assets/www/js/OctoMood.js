
  /*******************************************************************
  * OctoMood.js
  * Generated by Backendless Corp.
  ********************************************************************/
		
const Utils = {
  isObject : obj => obj === Object(obj),
  isString : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'String',
  isNumber : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Number',
  isBoolean: obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Boolean',
  isDate   : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Date'
}

Backendless.APIServices.OctoMood = {
  getMood(user) {   
    if (!Utils.isString(user)) {
      throw new Error('Invalid value for argument "user". Must be string value')
    }
    
    const args = user
    return Backendless.APIServices.invoke('OctoMood', 'getMood', args)
  },

  getFollowers() { 
    const args = null
      
    return Backendless.APIServices.invoke('OctoMood', 'getFollowers', args)
  },

  getFollowersIdByUserId() { 
    const args = null
      
    return Backendless.APIServices.invoke('OctoMood', 'getFollowersIdByUserId', args)
  },

  getFollowerMoods() { 
    const args = null
      
    return Backendless.APIServices.invoke('OctoMood', 'getFollowerMoods', args)
  },

  getUserById(userId) {   
    if (!Utils.isString(userId)) {
      throw new Error('Invalid value for argument "userId". Must be string value')
    }
    
    const args = userId
    return Backendless.APIServices.invoke('OctoMood', 'getUserById', args)
  },

  getUserIdByEmail() { 
    const args = null
      
    return Backendless.APIServices.invoke('OctoMood', 'getUserIdByEmail', args)
  },

  createRequest(email) {   
    if (!Utils.isString(email)) {
      throw new Error('Invalid value for argument "email". Must be string value')
    }
    
    const args = email
    return Backendless.APIServices.invoke('OctoMood', 'createRequest', args)
  },

  getRequests() { 
    const args = null
      
    return Backendless.APIServices.invoke('OctoMood', 'getRequests', args)
  },

  getRequestById(requestId) {   
    if (!Utils.isString(requestId)) {
      throw new Error('Invalid value for argument "requestId". Must be string value')
    }
    
    const args = requestId
    return Backendless.APIServices.invoke('OctoMood', 'getRequestById', args)
  },

  acceptRequest(requestId) {   
    if (!Utils.isString(requestId)) {
      throw new Error('Invalid value for argument "requestId". Must be string value')
    }
    
    const args = requestId
    return Backendless.APIServices.invoke('OctoMood', 'acceptRequest', args)
  },

  declineRequest(requestId) {   
    if (!Utils.isString(requestId)) {
      throw new Error('Invalid value for argument "requestId". Must be string value')
    }
    
    const args = requestId
    return Backendless.APIServices.invoke('OctoMood', 'declineRequest', args)
  }
}
